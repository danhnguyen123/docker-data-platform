version: "3"
services:

## Spark Standalone ##

  spark-master:
    build:
      context: ./architecture/spark
      dockerfile: Dockerfile
    image: spark-image
    container_name: spark-master
    hostname: spark-master
    command: bash -c "sbin/start-master.sh -p 7077"
    environment:
      - SPARK_LOCAL_IP=spark-master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    env_file:
      - ./architecture/spark/.env.spark
    ports:
      - 4040:4040
      - 7077:7077
      - 8080:8080
    volumes:
      - spark-logs:/opt/spark/spark-events
      - ./architecture/spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    depends_on:
      - hive-metastore
    networks:
      - data-network

  spark-worker:
    image: spark-image
    command: bash -c "sbin/start-worker.sh spark://spark-master:7077"
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    env_file:
      - ./architecture/spark/.env.spark
    volumes:
      - ./architecture/spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    depends_on:
      - spark-master
    networks:
      - data-network

  spark-history-server:
    container_name: spark-history
    image: spark-image
    command: bash -c "sbin/start-history-server.sh"
    depends_on:
      - spark-master
    env_file:
      - ./architecture/spark/.env.spark
    volumes:
      - spark-logs:/opt/spark/spark-events
    ports:
      - 18080:18080
    networks:
      - data-network

  spark-thrift-server:
    container_name: spark-thrift-server
    image: spark-image
    profiles: ["spark-thrift-server"]
    volumes:
      - spark-logs:/opt/spark/spark-events
    ports:
      - 4041:4040
      - 10000:10000
      - 10002:10002
    command: bash -c "
      sleep 10 && sbin/start-thriftserver.sh
                --driver-java-options '-Dhive.metastore.uris=thrift://hive-metastore:9083'
                --master spark://spark-master:7077
                --executor-cores 1
                --executor-memory 2G
                --total-executor-cores 1"
    depends_on:
      - spark-master
      - hive-metastore
    networks:
      - data-network

  # spark-notebook:
  #   image: spark-notebook
  #   build:
  #     context: ./architecture/spark
  #     dockerfile: ./jupyterlab.Dockerfile
  #   container_name: spark-notebook
  #   command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=123 --NotebookApp.password=123
  #   volumes:
  #     - ./workspace:/opt/workspace
  #     - ./architecture/spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
  #   ports:
  #     - 8888:8888
  #     - 4042:4040
  #   depends_on:
  #     - spark-master
  #   networks:
  #     - data-network

## Hive Metastore Service ##

  metastore-db:
    image: postgres:15
    restart: unless-stopped
    container_name: metastore-db
    hostname: metastore-db
    environment:
      POSTGRES_DB: 'metastore_db'
      POSTGRES_USER: 'hive'
      POSTGRES_PASSWORD: 'password'
    ports:
      - '5430:5432'
    volumes:
      - metastore-db:/var/lib/postgresql
    networks:
      - data-network

  hive-metastore:
    build:
      context: ./architecture/hive
      dockerfile: Dockerfile
    image: hive-image
    container_name: hive-metastore
    hostname: hive-metastore
    environment:
      DB_DRIVER: postgres
      SERVICE_NAME: 'metastore'
      SERVICE_OPTS: '-Xmx1G'
    ports:
        - 9083:9083
    volumes:
        - warehouse:/opt/hive/data/warehouse
    depends_on:
      - metastore-db
    restart: unless-stopped
    networks:
      - data-network

## Object Storage ##

  minio:
    image: minio/minio
    hostname: minio
    container_name: minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server --console-address ":9001" /data
    volumes:
      - minio:/data
    networks:
      - data-network

  createbuckets:
    image: minio/mc
    container_name: createbuckets
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c " /usr/bin/mc config host add myminio http://minio:9000 minio minio123;
                   /usr/bin/mc rm -r --force myminio/tpch;
                   /usr/bin/mc mb myminio/tpch;
                   /usr/bin/mc policy download myminio/tpch;
                   /usr/bin/mc rm -r --force myminio/rainforest;
                   /usr/bin/mc mb myminio/rainforest;
                   /usr/bin/mc policy download myminio/rainforest;
                   exit 0; "
    networks:
      - data-network

## Query Engine ##

  trino:
    container_name: trino
    image: "trinodb/trino"
    hostname: trino
    profiles: ["query"]
    ports:
      - 8000:8080
    volumes:
      - ./architecture/trino/catalog:/etc/trino/catalog
    depends_on:
      - hive-metastore
    networks:
      - data-network

## SQL Editor ##

  hue-server:
    image: gethue/hue:latest
    hostname: hue-server
    container_name: hue-server
    profiles: ["query"]
    ports:
      - 8800:8888
    volumes:
      - ./architecture/hue/hue.ini:/usr/share/hue/desktop/conf/z-hue.ini
    depends_on:
      - hue-db
      - trino
    networks:
      - data-network

  hue-db:
    image: mysql:5.7
    hostname: hue-db
    container_name: hue-db
    profiles: ["query"]
    ports:
      - 33061:3306
    command: --init-file /data/application/init.sql
    volumes:
      - hue-db:/var/lib/mysql
      - ./architecture/hue/init.sql:/data/application/init.sql
    environment:
      MYSQL_ROOT_USER: hueuser
      MYSQL_ROOT_PASSWORD: huepassword
      MYSQL_DATABASE: hue
      MYSQL_USER: hueuser
      MYSQL_PASSWORD: huepassword
    networks:
      - data-network

## Visualization ##

  metabase:
    image: metabase-image
    build:
      context: ./architecture/metabase
      dockerfile: Dockerfile
    container_name: metabase
    hostname: metabase
    profiles: ["visualization"]
    volumes:
    - metabase:/dev/random:ro
    ports:
      - 3000:3000
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabaseappdb
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_PASS: mysecretpassword
      MB_DB_HOST: metabase-db
    depends_on:
      - metabase-db
      - trino
    networks:
      - data-network
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5

  metabase-db:
    image: postgres:15
    container_name: metabase-db
    hostname: metabase-db
    profiles: ["visualization"]
    environment:
      POSTGRES_USER: metabase
      POSTGRES_DB: metabaseappdb
      POSTGRES_PASSWORD: mysecretpassword
    volumes:
      - metabase-db:/var/lib/postgresql
    networks:
      - data-network

volumes:
  spark-logs:
  minio:
  metastore-db:
  warehouse:
  hue-db:
  metabase:
  metabase-db:

networks:
  data-network:
    driver: bridge
    name: data-network